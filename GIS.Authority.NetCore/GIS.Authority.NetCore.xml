<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GIS.Authority.NetCore</name>
    </assembly>
    <members>
        <member name="M:GIS.Authority.NetCore.ActionResultFilter.RecordLog(Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext)">
            <summary>
            记录日志
            </summary>
            <param name="action"></param>
        </member>
        <member name="F:GIS.Authority.NetCore.AuthorAttribute.SSL_TOKEN">
            <summary>
            token字段
            </summary>
        </member>
        <member name="M:GIS.Authority.NetCore.AuthorAttribute.GetTokenByHeader(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            获取token
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:GIS.Authority.NetCore.AuthorAttribute.GetTokenByQuery(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            获取token
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:GIS.Authority.NetCore.Api.FileController.DownLoadFile(System.String)">
            <summary>
            下载文件
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:GIS.Authority.NetCore.Api.FileController.UploadFile(Microsoft.AspNetCore.Http.IFormFile,System.Int32)">
            <summary>
            上传文件
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:GIS.Authority.NetCore.Api.FileController.GetUploadFileProgress(System.String)">
            <summary>
            获取文件进度
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:GIS.Authority.NetCore.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            启动web
            </summary>
            <param name="args">参数</param>
            <returns>builder</returns>
        </member>
        <member name="F:GIS.Authority.NetCore.Startup.CORS_TAG">
            <summary>
            cors跨域标签
            </summary>
        </member>
        <member name="T:NTPClient">
             <summary>
             SNTPClient is a C# class designed to connect to time servers on the Internet and
             fetch the current date and time. Optionally, it may update the time of the local system.
             The implementation of the protocol is based on the RFC 2030.
            
             Public class members:
            
             Initialize - Sets up data structure and prepares for connection.
            
             Connect - Connects to the time server and populates the data structure.
                It can also update the system time.
            
             IsResponseValid - Returns true if received data is valid and if comes from
             a NTP-compliant time server.
            
             ToString - Returns a string representation of the object.
            
             -----------------------------------------------------------------------------
             Structure of the standard NTP header (as described in RFC 2030)
                                   1                   2                   3
               0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |LI | VN  |Mode |    Stratum    |     Poll      |   Precision   |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                          Root Delay                           |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                       Root Dispersion                         |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                     Reference Identifier                      |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                   Reference Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                   Originate Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                    Receive Timestamp (64)                     |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                    Transmit Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                 Key Identifier (optional) (32)                |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                                                               |
              |                 Message Digest (optional) (128)               |
              |                                                               |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            
             -----------------------------------------------------------------------------
            
             SNTP Timestamp Format (as described in RFC 2030)
                                     1                   2                   3
                 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           Seconds                             |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Seconds Fraction (0-padded)                  |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            
             </summary>
        </member>
        <member name="F:NTPClient.SNTPDataLength">
            <summary>
            SNTP Data Structure Length
            </summary>
        </member>
        <member name="F:NTPClient.SNTPData">
            <summary>
            SNTP Data Structure (as described in RFC 2030)
            </summary>
        </member>
        <member name="P:NTPClient.LeapIndicator">
            <summary>
            Leap Indicator Warns of an impending leap second to be inserted/deleted in the last  minute of the current day. 值为“11”时表示告警状态，时钟未被同步。为其他值时NTP本身不做处理
            </summary>
        </member>
        <member name="P:NTPClient.VersionNumber">
            <summary>
            Version Number Version number of the protocol (3 or 4) NTP的版本号
            </summary>
        </member>
        <member name="P:NTPClient.Mode">
            <summary>
            Mode 长度为3比特，表示NTP的工作模式。不同的值所表示的含义分别是：0未定义、1表示主动对等体模式、2表示被动对等体模式、3表示客户模式、4表示服务器模式、5表示广播模式或组播模式、6表示此报文为NTP控制报文、7预留给内部使用
            </summary>
        </member>
        <member name="P:NTPClient.Stratum">
            <summary>
            Stratum 系统时钟的层数，取值范围为1～16，它定义了时钟的准确度。层数为1的时钟准确度最高，准确度从1到16依次递减，层数为16的时钟处于未同步状态，不能作为参考时钟
            </summary>
        </member>
        <member name="P:NTPClient.PollInterval">
            <summary>
            Poll Interval (in seconds) Maximum interval between successive messages 轮询时间，即两个连续NTP报文之间的时间间隔
            </summary>
        </member>
        <member name="P:NTPClient.Precision">
            <summary>
            Precision (in seconds) Precision of the clock 系统时钟的精度
            </summary>
        </member>
        <member name="P:NTPClient.RootDelay">
            <summary>
            Root Delay (in milliseconds) Round trip time to the primary reference source NTP服务器到主参考时钟的延迟
            </summary>
        </member>
        <member name="P:NTPClient.RootDispersion">
            <summary>
            Root Dispersion (in milliseconds) Nominal error relative to the primary reference source 系统时钟相对于主参考时钟的最大误差
            </summary>
        </member>
        <member name="P:NTPClient.ReferenceID">
            <summary>
            Reference Identifier Reference identifier (either a 4 character string or an IP address)
            </summary>
        </member>
        <member name="P:NTPClient.ReferenceTimestamp">
            <summary>
            Reference Timestamp The time at which the clock was last set or corrected NTP系统时钟最后一次被设定或更新的时间
            </summary>
        </member>
        <member name="P:NTPClient.OriginateTimestamp">
            <summary>
            Originate Timestamp (T1)  The time at which the request departed the client for the server. 发送报文时的本机时间
            </summary>
        </member>
        <member name="P:NTPClient.ReceiveTimestamp">
            <summary>
            Receive Timestamp (T2) The time at which the request arrived at the server. 报文到达NTP服务器时的服务器时间
            </summary>
        </member>
        <member name="P:NTPClient.TransmitTimestamp">
            <summary>
            Transmit Timestamp (T3) The time at which the reply departed the server for client.  报文从NTP服务器离开时的服务器时间
            </summary>
        </member>
        <member name="F:NTPClient.DestinationTimestamp">
            <summary>
            Destination Timestamp (T4) The time at which the reply arrived at the client. 接收到来自NTP服务器返回报文时的本机时间
            </summary>
        </member>
        <member name="P:NTPClient.RoundTripDelay">
            <summary>
            Round trip delay (in milliseconds) The time between the departure of request and arrival of reply 报文从本地到NTP服务器的往返时间
            </summary>
        </member>
        <member name="P:NTPClient.LocalClockOffset">
            <summary>
            Local clock offset (in milliseconds)  The offset of the local clock relative to the primary reference source.本机相对于NTP服务器（主时钟）的时间差
            </summary>
        </member>
        <member name="M:NTPClient.ComputeDate(System.UInt64)">
            <summary>
            Compute date, given the number of milliseconds since January 1, 1900
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:NTPClient.GetMilliSeconds(System.Byte)">
            <summary>
            Compute the number of milliseconds, given the offset of a 8-byte array
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:NTPClient.SetDate(System.Byte,System.DateTime)">
            <summary>
            Compute the 8-byte array, given the date
            </summary>
            <param name="offset"></param>
            <param name="date"></param>
        </member>
        <member name="M:NTPClient.Initialize">
            <summary>
            Initialize the NTPClient data
            </summary>
        </member>
        <member name="F:NTPClient.serverAddress">
            <summary>
            The IPAddress of the time server we're connecting to
            </summary>
        </member>
        <member name="M:NTPClient.#ctor(System.String)">
            <summary>
            Constractor with HostName
            </summary>
            <param name="host"></param>
        </member>
        <member name="M:NTPClient.#ctor(System.Net.IPAddress)">
            <summary>
            Constractor with IPAddress
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:NTPClient.Connect(System.Boolean,System.Int32)">
            <summary>
            Connect to the time server and update system time
            </summary>
            <param name="updateSystemTime"></param>
        </member>
        <member name="P:NTPClient.IsResponseValid">
            <summary>
            Check if the response from server is valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:NTPClient.ToString">
            <summary>
            Converts the object to string
            </summary>
            <returns></returns>
        </member>
        <member name="T:NTPClient.SYSTEMTIME">
            <summary>
            SYSTEMTIME structure used by SetSystemTime
            </summary>
        </member>
        <member name="M:NTPClient.SetTime">
            <summary>
            Set system time according to transmit timestamp 把本地时间设置为获取到的时钟时间
            </summary>
        </member>
        <member name="T:_LeapIndicator">
            <summary>
            Leap indicator field values
            </summary>
        </member>
        <member name="T:_Mode">
            <summary>
            Mode field values
            </summary>
        </member>
        <member name="T:_Stratum">
            <summary>
            Stratum field values
            </summary>
        </member>
    </members>
</doc>
